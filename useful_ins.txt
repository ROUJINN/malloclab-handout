最后建议直接在服务器上写这个lab，这样就不会因为机器间的性能差异被坑了！！

64-bit machines, heap size 2^32 bytes
Your allocator must always return pointers that are aligned to 8-byte boundaries
5 各个function功能的介绍
6  Support Routines
8 Programming Rules
11 hints
12 more hints
u只记入uti p只计入thru 

书上：

我们将看到更加精细复杂的分离式空闲链表组织，它接近于最佳适配策略，不需要进行彻底的堆搜索。

使用双向链表（显式空闲链表）而不是隐式空闲链表，使首次适配的分配时间从块总数的线性时间减少到了空闲块数量的线性时间。不过，释放一个块的时间可以是线性的，也可能是个常数，这取决于我们所选择的空闲链表中块的排序策略。
一种方法是用后进先出（LIFO）的顺序维护链表，将新释放的块放置在链表的开始处。使用 LIFO 的顺序和首次适配的放置策略，分配器会最先检查最近使用过的块。在这种情况下，释放一个块可以在常数时间内完成。如果使用了边界标记，那么合并也可以在常数时间内完成。
另一种方法是按照地址顺序来维护链表，其中链表中每个块的地址都小于它后继的地址。在这种情况下，释放一个块需要线性时间的搜索来定位合适的前驱。平衡点在于，按照地址排序的首次适配比 LIFO 排序的首次适配有更高的内存利用率，接近最佳适配的利用率。
ppt p63对上面的有介绍

简单分离存储：这种简单的方法有许多优点。分配和释放块都是很快的常数时间操作。而且，每个片中都是大小相等的块，不分割，不合并，这意味着每个块只有很少的内存开销。

分离适配是最好的，malloc所用的。

boat问题是分配了20,12的块，释放所有20的，然后a了几个1024，然后a20

binary2-bal问题是随机a了64,448，再随机free，然后a512，但512塞不进去

我看满分的boat,exhaust,Chrome也都是70多，但其他的很高
打算写个分离适配然后就不管了

gdb mdriver
r -D -V -c ./traces/realloc.rep > 1.txt
./mdriver -D -V -c ./traces/perl.rep > 1.txt
./mdriver -D -V -c ./traces/binary2-bal.rep > 1.txt
./mdriver -p ./traces/realloc.rep
gprof ./mdriver gmon.out -b > 1.txt
watch *0x800000010
x /dw 0x800000010
display /dw 0x800000010
display /4xb 0x800000010

Results for mm malloc:
  valid  util   ops    secs     Kops  trace
   yes    77%  100000  0.005741 17418 ./traces/alaska.rep
 * yes    92%    4805  0.000532  9040 ./traces/amptjp.rep
 * yes    81%    4162  0.000190 21925 ./traces/bash.rep
 * yes    77%   57716  0.002017 28614 ./traces/boat.rep
 * yes    78%  100000  0.011966  8357 ./traces/boat-plus.rep
 u yes    73%      --        --    -- ./traces/binary2-bal.rep
 * yes    93%    5032  0.000477 10551 ./traces/cccp.rep
 * yes    93%    5848  0.000508 11502 ./traces/cccp-bal.rep
 * yes    72%   11991  0.000551 21769 ./traces/chrome.rep
 * yes    98%   20000  0.000887 22539 ./traces/coalesce-big.rep
   yes    50%   14400  0.000601 23949 ./traces/coalescing-bal.rep
   yes   100%      15  0.000003  4686 ./traces/corners.rep
 * yes    96%    5683  0.000756  7517 ./traces/cp-decl.rep
 u yes    71%      --        --    -- ./traces/exhaust.rep
 * yes    97%    5380  0.000768  7010 ./traces/expr-bal.rep
 * yes    84%   99544  0.004644 21437 ./traces/firefox-reddit2.rep
 * yes    97%   55092  0.002404 22914 ./traces/freeciv.rep
   yes    17%      10  0.000002  5111 ./traces/malloc.rep
   yes    14%      17  0.000002  7348 ./traces/malloc-free.rep
 p yes     --    1494  0.000064 23471 ./traces/perl.rep
 * yes    87%    4800  0.001409  3407 ./traces/random.rep
 * yes    85%    4800  0.001575  3048 ./traces/random2.rep
   yes    32%   14401  0.069457   207 ./traces/realloc.rep
16 15     86%  386347  0.028746 13440

Perf index = 48 (util) & 38 (thru) = 86/100

没*的不会计入分！！！u只计入util

trace文件的意思https://111qqz.com/2021/04/csapp-malloclab/
第2个数 多少个不同的内存块
第3个数 操作数，也就是malloc(对应'a'),realloc(对应'r'),free(对应'f')三种操作的个数。
对于每一个操作，如果是malloc/relloc, 后面两个参数分别表示操作几号内存块，以及需要分配的内存大小是多少。如果是free,则只有一个参数，表示要操作几号内存块